package edu.upc.as.data.speedment.showscom.public_.espectacle.impl;

import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import edu.upc.as.data.speedment.showscom.public_.espectacle.Espectacle;
import edu.upc.as.data.speedment.showscom.public_.representacio.Representacio;

import javax.annotation.Generated;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.stream.Stream;

/**
 * An implementation representing an entity (for example, a row) in the
 * com.speedment.internal.ui.config.TableProperty@5c25a06a.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public final class EspectacleImpl extends AbstractBaseEntity<Espectacle> implements Espectacle {
    
    private String titol;
    private Integer participants;
    
    EspectacleImpl(Speedment speedment) {
        super(speedment);
    }
    
    public EspectacleImpl(Speedment speedment, final Espectacle espectacle) {
        super(speedment);
        setTitol(espectacle.getTitol());
        setParticipants(espectacle.getParticipants());
    }
    
    @Override
    public String getTitol() {
        return titol;
    }
    
    @Override
    public final EspectacleImpl setTitol(String titol) {
        this.titol = titol;
        return this;
    }
    
    @Override
    public Integer getParticipants() {
        return participants;
    }
    
    @Override
    public final EspectacleImpl setParticipants(Integer participants) {
        this.participants = participants;
        return this;
    }

    public Stream<Representacio> findRepresentaciosByTitolespectacle() {
        return managerOf_(Representacio.class)
                .stream().filter(Representacio.TITOLESPECTACLE.equal(this.getTitol()));
    }
    
    @Override
    public Stream<Representacio> findRepresentacios() {
        return findRepresentaciosByTitolespectacle();
    }
    
    @Override
    public Espectacle copy() {
        return new EspectacleImpl(getSpeedment_(), this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("titol = "+Objects.toString(getTitol()));
        sj.add("participants = "+Objects.toString(getParticipants()));
        return "EspectacleImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Espectacle)) { return false; }
        @SuppressWarnings("unchecked")
        final Espectacle thatEspectacle = (Espectacle)that;
        if (!Objects.equals(this.getTitol(), thatEspectacle.getTitol())) {return false; }
        if (!Objects.equals(this.getParticipants(), thatEspectacle.getParticipants())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getTitol());
        hash = 31 * hash + Objects.hashCode(getParticipants());
        return hash;
    }
    
    @Override
    public Class<Espectacle> getEntityClass_() {
        return Espectacle.class;
    }
}