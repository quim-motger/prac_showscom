package edu.upc.as.data.speedment.showscom.public_.seient;

import com.speedment.Entity;
import com.speedment.field.ComparableField;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import edu.upc.as.data.speedment.showscom.public_.seient_en_representacio.SeientEnRepresentacio;

import javax.annotation.Generated;
import java.util.stream.Stream;

/**
 * An interface representing an entity (for example, a row) in the
 * com.speedment.internal.ui.config.TableProperty@d701cb4.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface Seient extends Entity<Seient> {
    
    /**
     * This Field corresponds to the {@link Seient} field that can be obtained
     * using the {@link Seient#getFila()} method.
     */
    public final static ComparableField<Seient, Integer> FILA = new ComparableFieldImpl<>("fila", Seient::getFila, Seient::setFila);
    /**
     * This Field corresponds to the {@link Seient} field that can be obtained
     * using the {@link Seient#getColumna()} method.
     */
    public final static ComparableField<Seient, Integer> COLUMNA = new ComparableFieldImpl<>("columna", Seient::getColumna, Seient::setColumna);
    /**
     * This Field corresponds to the {@link Seient} field that can be obtained
     * using the {@link Seient#getNomlocal()} method.
     */
    public final static StringField<Seient> NOMLOCAL = new StringFieldImpl<>("nomlocal", Seient::getNomlocal, Seient::setNomlocal);
    
    /**
     * Returns the fila of this Seient. The fila field corresponds to the
     * database column showscom.public.seient.fila.
     * 
     * @return the fila of this Seient
     */
    Integer getFila();
    
    /**
     * Sets the fila of this Seient. The fila field corresponds to the database
     * column showscom.public.seient.fila.
     *
     * @param fila to set of this Seient
     * @return this Seient instance
     */
    Seient setFila(Integer fila);
    
    /**
     * Returns the columna of this Seient. The columna field corresponds to the
     * database column showscom.public.seient.columna.
     *
     * @return the columna of this Seient
     */
    Integer getColumna();
    
    /**
     * Sets the columna of this Seient. The columna field corresponds to the
     * database column showscom.public.seient.columna.
     *
     * @param columna to set of this Seient
     * @return this Seient instance
     */
    Seient setColumna(Integer columna);
    
    /**
     * Returns the nomlocal of this Seient. The nomlocal field corresponds to the
     * database column showscom.public.seient.nomlocal.
     *
     * @return the nomlocal of this Seient
     */
    String getNomlocal();
    
    /**
     * Sets the nomlocal of this Seient. The nomlocal field corresponds to the
     * database column showscom.public.seient.nomlocal.
     * 
     * @param nomlocal to set of this Seient
     * @return this Seient instance
     */
    Seient setNomlocal(String nomlocal);
    
    /**
     * Creates and returns a {@link Stream} of all {@link SeientEnRepresentacio}
     * Entities that references this Entity by the foreign key field that can be
     * obtained using {@link SeientEnRepresentacio#getFila()}. The order of the
     * Entities are undefined and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link SeientEnRepresentacio} Entities
     * that references this Entity by the foreign key field that can be obtained
     * using {@link SeientEnRepresentacio#getFila()}
     */
    Stream<SeientEnRepresentacio> findSeientEnRepresentaciosByFila();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * SeientEnRepresentacio} Entities that references this Entity by a foreign
     * key. The order of the Entities are undefined and may change from time to
     * time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link
     * SeientEnRepresentacio} Entities that references this Entity by a foreign
     * key
     */
    Stream<SeientEnRepresentacio> findSeientEnRepresentacios();
}