package edu.upc.as.data.speedment.showscom.public_.espectacle.impl;

import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import edu.upc.as.data.speedment.showscom.public_.espectacle.Espectacle;

import javax.annotation.Generated;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@5c25a06a.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class EspectacleManagerImpl extends AbstractSqlManager<Espectacle> {
    
    private final TypeMapper<String, String> titolTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> participantsTypeMapper = new IntegerIdentityMapper();
    
    public EspectacleManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Espectacle> getEntityClass() {
        return Espectacle.class;
    }
    
    @Override
    public Object get(Espectacle entity, Column column) {
        switch (column.getName()) {
            case "titol" : return entity.getTitol();
            case "participants" : return entity.getParticipants();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Espectacle entity, Column column, Object value) {
        switch (column.getName()) {
            case "titol" : entity.setTitol((String) value); break;
            case "participants" : entity.setParticipants((Integer) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("showscom.public.espectacle");
    }
    
    protected Espectacle defaultReadEntity(ResultSet resultSet) {
        final Espectacle entity = newInstance();
        try {
            entity.setTitol(titolTypeMapper.toJavaType(resultSet.getString(1)));
            entity.setParticipants(participantsTypeMapper.toJavaType(resultSet.getInt(2)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Espectacle newInstance() {
        return new EspectacleImpl(speedment);
    }
    
    @Override
    public String primaryKeyFor(Espectacle entity) {
        return entity.getTitol();
    }
}