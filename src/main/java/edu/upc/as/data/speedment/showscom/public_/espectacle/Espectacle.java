package edu.upc.as.data.speedment.showscom.public_.espectacle;

import com.speedment.Entity;
import com.speedment.field.ComparableField;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import edu.upc.as.data.speedment.showscom.public_.representacio.Representacio;

import javax.annotation.Generated;
import java.util.stream.Stream;

/**
 * An interface representing an entity (for example, a row) in the
 * com.speedment.internal.ui.config.TableProperty@5c25a06a.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface Espectacle extends Entity<Espectacle> {
    
    /**
     * This Field corresponds to the {@link Espectacle} field that can be
     * obtained using the {@link Espectacle#getTitol()} method.
     */
    public final static StringField<Espectacle> TITOL = new StringFieldImpl<>("titol", Espectacle::getTitol, Espectacle::setTitol);
    /**
     * This Field corresponds to the {@link Espectacle} field that can be
     * obtained using the {@link Espectacle#getParticipants()} method.
     */
    public final static ComparableField<Espectacle, Integer> PARTICIPANTS = new ComparableFieldImpl<>("participants", Espectacle::getParticipants, Espectacle::setParticipants);
    
    /**
     * Returns the titol of this Espectacle. The titol field corresponds to the
     * database column showscom.public.espectacle.titol.
     * 
     * @return the titol of this Espectacle
     */
    String getTitol();
    
    /**
     * Sets the titol of this Espectacle. The titol field corresponds to the
     * database column showscom.public.espectacle.titol.
     *
     * @param titol to set of this Espectacle
     * @return this Espectacle instance
     */
    Espectacle setTitol(String titol);
    
    /**
     * Returns the participants of this Espectacle. The participants field
     * corresponds to the database column
     * showscom.public.espectacle.participants.
     *
     * @return the participants of this Espectacle
     */
    Integer getParticipants();
    
    /**
     * Sets the participants of this Espectacle. The participants field
     * corresponds to the database column
     * showscom.public.espectacle.participants.
     * 
     * @param participants to set of this Espectacle
     * @return this Espectacle instance
     */
    Espectacle setParticipants(Integer participants);
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Representacio} Entities that references this Entity by a foreign key. The
     * order of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Representacio}
     * Entities that references this Entity by a foreign key
     */
    Stream<Representacio> findRepresentacios();
}