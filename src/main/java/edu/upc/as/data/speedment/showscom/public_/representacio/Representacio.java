package edu.upc.as.data.speedment.showscom.public_.representacio;

import com.speedment.Entity;
import com.speedment.field.ComparableField;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import edu.upc.as.data.speedment.showscom.public_.estrena.Estrena;
import edu.upc.as.data.speedment.showscom.public_.seient_en_representacio.SeientEnRepresentacio;

import javax.annotation.Generated;
import java.sql.Date;
import java.util.stream.Stream;

/**
 * An interface representing an entity (for example, a row) in the
 * com.speedment.internal.ui.config.TableProperty@503b857e.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface Representacio extends Entity<Representacio> {
    

    /**
     * This Field corresponds to the {@link Representacio} field that can be
     * obtained using the {@link Representacio#getSessio()} method.
     */
    public final static StringField<Representacio> SESSIO = new StringFieldImpl<>("sessio", Representacio::getSessio, Representacio::setSessio);
    /**
     * This Field corresponds to the {@link Representacio} field that can be
     * obtained using the {@link Representacio#getNomlocal()} method.
     */
    public final static StringField<Representacio> NOMLOCAL = new StringFieldImpl<>("nomlocal", Representacio::getNomlocal, Representacio::setNomlocal);
    /**
     * This Field corresponds to the {@link Representacio} field that can be
     * obtained using the {@link Representacio#getPreu()} method.
     */
    public final static ComparableField<Representacio, Float> PREU = new ComparableFieldImpl<>("preu", Representacio::getPreu, Representacio::setPreu);
    /**
     * This Field corresponds to the {@link Representacio} field that can be
     * obtained using the {@link Representacio#getData()} method.
     */
    public final static ComparableField<Representacio, Date> DATA = new ComparableFieldImpl<>("data", Representacio::getData, Representacio::setData);
    /**
     * This Field corresponds to the {@link Representacio} field that can be
     * obtained using the {@link Representacio#getNombreseienslliures()} method.
     */
    public final static ComparableField<Representacio, Integer> NOMBRESEIENSLLIURES = new ComparableFieldImpl<>("nombreseienslliures", Representacio::getNombreseienslliures, Representacio::setNombreseienslliures);
    
    /**
     * Returns the titolespectacle of this Representacio. The titolespectacle
     * field corresponds to the database column
     * showscom.public.representacio.titolespectacle.
     * 
     * @return the titolespectacle of this Representacio
     */
    String getTitolespectacle();
    
    /**
     * Sets the titolespectacle of this Representacio. The titolespectacle field
     * corresponds to the database column
     * showscom.public.representacio.titolespectacle.
     *
     * @param titolespectacle to set of this Representacio
     * @return this Representacio instance
     */
    Representacio setTitolespectacle(String titolespectacle);
    
    /**
     * Returns the sessio of this Representacio. The sessio field corresponds to
     * the database column showscom.public.representacio.sessio.
     *
     * @return the sessio of this Representacio
     */
    String getSessio();
    
    /**
     * Sets the sessio of this Representacio. The sessio field corresponds to the
     * database column showscom.public.representacio.sessio.
     *
     * @param sessio to set of this Representacio
     * @return this Representacio instance
     */
    Representacio setSessio(String sessio);
    
    /**
     * Returns the nomlocal of this Representacio. The nomlocal field corresponds
     * to the database column showscom.public.representacio.nomlocal.
     *
     * @return the nomlocal of this Representacio
     */
    String getNomlocal();
    
    /**
     * Sets the nomlocal of this Representacio. The nomlocal field corresponds to
     * the database column showscom.public.representacio.nomlocal.
     *
     * @param nomlocal to set of this Representacio
     * @return this Representacio instance
     */
    Representacio setNomlocal(String nomlocal);
    
    /**
     * Returns the preu of this Representacio. The preu field corresponds to the
     * database column showscom.public.representacio.preu.
     *
     * @return the preu of this Representacio
     */
    Float getPreu();
    
    /**
     * Sets the preu of this Representacio. The preu field corresponds to the
     * database column showscom.public.representacio.preu.
     *
     * @param preu to set of this Representacio
     * @return this Representacio instance
     */
    Representacio setPreu(Float preu);
    
    /**
     * Returns the data of this Representacio. The data field corresponds to the
     * database column showscom.public.representacio.data.
     *
     * @return the data of this Representacio
     */
    Date getData();
    
    /**
     * Sets the data of this Representacio. The data field corresponds to the
     * database column showscom.public.representacio.data.
     *
     * @param data to set of this Representacio
     * @return this Representacio instance
     */
    Representacio setData(Date data);
    
    /**
     * Returns the nombreseienslliures of this Representacio. The
     * nombreseienslliures field corresponds to the database column
     * showscom.public.representacio.nombreseienslliures.
     *
     * @return the nombreseienslliures of this Representacio
     */
    Integer getNombreseienslliures();
    
    /**
     * Sets the nombreseienslliures of this Representacio. The
     * nombreseienslliures field corresponds to the database column
     * showscom.public.representacio.nombreseienslliures.
     * 
     * @param nombreseienslliures to set of this Representacio
     * @return this Representacio instance
     */
    Representacio setNombreseienslliures(Integer nombreseienslliures);

    
    /**
     * Creates and returns a {@link Stream} of all {@link SeientEnRepresentacio}
     * Entities that references this Entity by the foreign key field that can be
     * obtained using {@link SeientEnRepresentacio#getSessio()}. The order of the
     * Entities are undefined and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link SeientEnRepresentacio} Entities
     * that references this Entity by the foreign key field that can be obtained
     * using {@link SeientEnRepresentacio#getSessio()}
     */
    Stream<SeientEnRepresentacio> findSeientEnRepresentaciosBySessio();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * SeientEnRepresentacio} Entities that references this Entity by a foreign
     * key. The order of the Entities are undefined and may change from time to
     * time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link
     * SeientEnRepresentacio} Entities that references this Entity by a foreign
     * key
     */
    Stream<SeientEnRepresentacio> findSeientEnRepresentacios();

    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Estrena} Entities that references this Entity by a foreign key. The order
     * of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Estrena} Entities
     * that references this Entity by a foreign key
     */
    Estrena findEstrenas();
}