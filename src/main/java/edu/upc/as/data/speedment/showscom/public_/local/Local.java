package edu.upc.as.data.speedment.showscom.public_.local;

import com.speedment.Entity;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.StringFieldImpl;
import edu.upc.as.data.speedment.showscom.public_.representacio.Representacio;
import edu.upc.as.data.speedment.showscom.public_.seient.Seient;

import javax.annotation.Generated;
import java.util.stream.Stream;

/**
 * An interface representing an entity (for example, a row) in the
 * com.speedment.internal.ui.config.TableProperty@2c42abda.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface Local extends Entity<Local> {
    
    /**
     * This Field corresponds to the {@link Local} field that can be obtained
     * using the {@link Local#getNom()} method.
     */
    public final static StringField<Local> NOM = new StringFieldImpl<>("nom", Local::getNom, Local::setNom);
    /**
     * This Field corresponds to the {@link Local} field that can be obtained
     * using the {@link Local#getAdreA()} method.
     */
    public final static StringField<Local> ADREA = new StringFieldImpl<>("adreça", Local::getAdreA, Local::setAdreA);
    
    /**
     * Returns the nom of this Local. The nom field corresponds to the database
     * column showscom.public.local.nom.
     * 
     * @return the nom of this Local
     */
    String getNom();
    
    /**
     * Sets the nom of this Local. The nom field corresponds to the database
     * column showscom.public.local.nom.
     *
     * @param nom to set of this Local
     * @return this Local instance
     */
    Local setNom(String nom);
    
    /**
     * Returns the adreA of this Local. The adreA field corresponds to the
     * database column showscom.public.local.adreça.
     *
     * @return the adreA of this Local
     */
    String getAdreA();
    
    /**
     * Sets the adreA of this Local. The adreA field corresponds to the database
     * column showscom.public.local.adreça.
     * 
     * @param adreA to set of this Local
     * @return this Local instance
     */
    Local setAdreA(String adreA);
    
    /**
     * Creates and returns a {@link Stream} of all {@link Representacio} Entities
     * that references this Entity by the foreign key field that can be obtained
     * using {@link Representacio#getNomlocal()}. The order of the Entities are
     * undefined and may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Representacio} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Representacio#getNomlocal()}
     */
    Stream<Representacio> findRepresentaciosByNomlocal();
    
    /**
     * Creates and returns a {@link Stream} of all {@link Seient} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Seient#getNomlocal()}. The order of the Entities are undefined and
     * may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Seient} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Seient#getNomlocal()}
     */
    Stream<Seient> findSeientsByNomlocal();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Seient} Entities that references this Entity by a foreign key. The order
     * of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Seient} Entities
     * that references this Entity by a foreign key
     */
    Stream<Seient> findSeients();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Representacio} Entities that references this Entity by a foreign key. The
     * order of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Representacio}
     * Entities that references this Entity by a foreign key
     */
    Stream<Representacio> findRepresentacios();
}