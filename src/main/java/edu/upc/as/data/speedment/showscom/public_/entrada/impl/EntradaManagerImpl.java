package edu.upc.as.data.speedment.showscom.public_.entrada.impl;

import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.DateIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.FloatIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import edu.upc.as.data.speedment.showscom.public_.entrada.Entrada;

import javax.annotation.Generated;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@3c4464bf.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class EntradaManagerImpl extends AbstractSqlManager<Entrada> {
    
    private final TypeMapper<String, String> dniclientTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> nombreespectadorsTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Date, Date> dataTypeMapper = new DateIdentityMapper();
    private final TypeMapper<Float, Float> preuTypeMapper = new FloatIdentityMapper();
    private final TypeMapper<String, String> sessioTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> nomlocalTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> identificadorTypeMapper = new IntegerIdentityMapper();
    
    public EntradaManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Entrada> getEntityClass() {
        return Entrada.class;
    }
    
    @Override
    public Object get(Entrada entity, Column column) {
        switch (column.getName()) {
            case "dniclient" : return entity.getDniclient();
            case "nombreespectadors" : return entity.getNombreespectadors();
            case "data" : return entity.getData();
            case "preu" : return entity.getPreu();
            case "sessio" : return entity.getSessio();
            case "nomlocal" : return entity.getNomlocal();
            case "identificador" : return entity.getIdentificador();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Entrada entity, Column column, Object value) {
        switch (column.getName()) {
            case "dniclient" : entity.setDniclient((String) value); break;
            case "nombreespectadors" : entity.setNombreespectadors((Integer) value); break;
            case "data" : entity.setData((Date) value); break;
            case "preu" : entity.setPreu((Float) value); break;
            case "sessio" : entity.setSessio((String) value); break;
            case "nomlocal" : entity.setNomlocal((String) value); break;
            case "identificador" : entity.setIdentificador((Integer) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("showscom.public.entrada");
    }
    
    protected Entrada defaultReadEntity(ResultSet resultSet) {
        final Entrada entity = newInstance();
        try {
            entity.setDniclient(dniclientTypeMapper.toJavaType(resultSet.getString(1)));
            entity.setNombreespectadors(nombreespectadorsTypeMapper.toJavaType(resultSet.getInt(2)));
            entity.setData(dataTypeMapper.toJavaType(resultSet.getDate(3)));
            entity.setPreu(preuTypeMapper.toJavaType(resultSet.getFloat(4)));
            entity.setSessio(sessioTypeMapper.toJavaType(resultSet.getString(5)));
            entity.setNomlocal(nomlocalTypeMapper.toJavaType(resultSet.getString(6)));
            entity.setIdentificador(identificadorTypeMapper.toJavaType(resultSet.getInt(7)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Entrada newInstance() {
        return new EntradaImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(Entrada entity) {
        return entity.getIdentificador();
    }
}