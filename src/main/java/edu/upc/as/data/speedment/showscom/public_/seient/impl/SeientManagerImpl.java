package edu.upc.as.data.speedment.showscom.public_.seient.impl;

import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import edu.upc.as.data.speedment.showscom.public_.seient.Seient;

import javax.annotation.Generated;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@d701cb4.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class SeientManagerImpl extends AbstractSqlManager<Seient> {
    
    private final TypeMapper<Integer, Integer> filaTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> columnaTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> nomlocalTypeMapper = new StringIdentityMapper();
    
    public SeientManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Seient> getEntityClass() {
        return Seient.class;
    }
    
    @Override
    public Object get(Seient entity, Column column) {
        switch (column.getName()) {
            case "fila" : return entity.getFila();
            case "columna" : return entity.getColumna();
            case "nomlocal" : return entity.getNomlocal();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Seient entity, Column column, Object value) {
        switch (column.getName()) {
            case "fila" : entity.setFila((Integer) value); break;
            case "columna" : entity.setColumna((Integer) value); break;
            case "nomlocal" : entity.setNomlocal((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("showscom.public.seient");
    }
    
    protected Seient defaultReadEntity(ResultSet resultSet) {
        final Seient entity = newInstance();
        try {
            entity.setFila(filaTypeMapper.toJavaType(resultSet.getInt(1)));
            entity.setColumna(columnaTypeMapper.toJavaType(resultSet.getInt(2)));
            entity.setNomlocal(nomlocalTypeMapper.toJavaType(resultSet.getString(3)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Seient newInstance() {
        return new SeientImpl(speedment);
    }
    
    @Override
    public List<?> primaryKeyFor(Seient entity) {
        return Arrays.asList(entity.getFila(), entity.getColumna(), entity.getNomlocal());
    }
}