package edu.upc.as.data.speedment.showscom.public_.seient_en_representacio.impl;

import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import edu.upc.as.data.speedment.showscom.public_.seient_en_representacio.SeientEnRepresentacio;

import javax.annotation.Generated;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@31c4f311.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class SeientEnRepresentacioManagerImpl extends AbstractSqlManager<SeientEnRepresentacio> {
    
    private final TypeMapper<String, String> sessioTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> nomlocalrepTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> nomlocalTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> filaTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> columnaTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> estatTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> identificadorentradaTypeMapper = new IntegerIdentityMapper();
    
    public SeientEnRepresentacioManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<SeientEnRepresentacio> getEntityClass() {
        return SeientEnRepresentacio.class;
    }
    
    @Override
    public Object get(SeientEnRepresentacio entity, Column column) {
        switch (column.getName()) {
            case "sessio" : return entity.getSessio();
            case "nomlocalrep" : return entity.getNomlocalrep();
            case "nomlocal" : return entity.getNomlocal();
            case "fila" : return entity.getFila();
            case "columna" : return entity.getColumna();
            case "estat" : return entity.getEstat();
            case "identificadorentrada" : return entity.getIdentificadorentrada();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(SeientEnRepresentacio entity, Column column, Object value) {
        switch (column.getName()) {
            case "sessio" : entity.setSessio((String) value); break;
            case "nomlocalrep" : entity.setNomlocalrep((String) value); break;
            case "nomlocal" : entity.setNomlocal((String) value); break;
            case "fila" : entity.setFila((Integer) value); break;
            case "columna" : entity.setColumna((Integer) value); break;
            case "estat" : entity.setEstat((String) value); break;
            case "identificadorentrada" : entity.setIdentificadorentrada((Integer) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("showscom.public.seient_en_representacio");
    }
    
    protected SeientEnRepresentacio defaultReadEntity(ResultSet resultSet) {
        final SeientEnRepresentacio entity = newInstance();
        try {
            entity.setSessio(sessioTypeMapper.toJavaType(resultSet.getString(1)));
            entity.setNomlocalrep(nomlocalrepTypeMapper.toJavaType(resultSet.getString(2)));
            entity.setNomlocal(nomlocalTypeMapper.toJavaType(resultSet.getString(3)));
            entity.setFila(filaTypeMapper.toJavaType(resultSet.getInt(4)));
            entity.setColumna(columnaTypeMapper.toJavaType(resultSet.getInt(5)));
            entity.setEstat(estatTypeMapper.toJavaType(resultSet.getString(6)));
            entity.setIdentificadorentrada(identificadorentradaTypeMapper.toJavaType(getInt(resultSet, 7)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public SeientEnRepresentacio newInstance() {
        return new SeientEnRepresentacioImpl(speedment);
    }
    
    @Override
    public List<?> primaryKeyFor(SeientEnRepresentacio entity) {
        return Arrays.asList(entity.getSessio(), entity.getNomlocal(), entity.getFila(), entity.getColumna());
    }
}